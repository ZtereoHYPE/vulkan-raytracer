#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable

#include "util/parameters.comp"
#include "util/structures.comp"

// todo: experiment
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(std430, set = 0, binding = 0) uniform Camera {
    uvec2 resolution;
    vec2 uv;
    float focal_len;
    float focus_distance;
    float aperture_radius;
    uint frame;
    vec4 origin;
    mat4 rotation;
} camera;

layout(std430, set = 0, binding = 1) readonly buffer RayBuffer {
    Ray rays[];
} raybuffer;

layout(set = 1, binding = 0) writeonly uniform image2D framebuffer;

vec4 gamma_correction(vec4 color) {
    return sqrt(color);
}

/* Entrypoint */
void main() {
    ivec2 coordinates = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = ivec2(camera.resolution);

    if (coordinates.x < size.x && coordinates.y < size.y) {
        uint idx = coordinates.x + coordinates.y * size.x;
        imageStore(framebuffer, coordinates, gamma_correction(vec4(raybuffer.rays[idx].light, 1)));

//        imageStore(framebuffer, coordinates, gamma_correction(vec4((raybuffer.rays[idx].oob_quadrant >> 1) / 4.0)));
    }
}

