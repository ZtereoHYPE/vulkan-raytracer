#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable

#include "util/parameters.comp"
#include "util/structures.comp"

layout (local_size_x = TILE_SIZE, local_size_y = TILE_SIZE, local_size_z = 1) in;

layout(std430, set = 0, binding = 0) uniform Camera {
    uvec2 resolution;
    vec2 uv;
    float focal_len;
    float focus_distance;
    float aperture_radius;
    uint frame;
    vec4 origin;
    mat4 rotation;
} camera;

layout(std430, set = 0, binding = 1) readonly buffer RayBuffer {
    Ray rays[];
} raybuffer;

layout(set = 1, binding = 0) writeonly uniform image2D framebuffer;

/* Quick gamma correction approximation for gamma of 2.0 */
vec4 gamma_correction(vec4 color) {
    return sqrt(color);
}

/* Very very basic ACES Tone-Mapping (https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/) */
vec3 tone_map(vec3 x) {
	return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);
}

/* Entrypoint */
void main() {
    ivec2 coordinates = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = ivec2(camera.resolution);

    if (coordinates.x < size.x && coordinates.y < size.y) {
        uint idx = coordinates.x + coordinates.y * size.x;
        vec4 mapped = gamma_correction(vec4(tone_map(raybuffer.rays[idx].light), 1));

        imageStore(framebuffer, coordinates, mapped);
    }
}

