#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable

#include "util/parameters.comp"
#include "util/structures.comp"
#include "util/random.comp"

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(std430, set = 0, binding = 0) uniform Camera {
    uvec2 resolution;
    vec2 uv;
    float focal_len;
    float focus_distance;
    float aperture_radius;
    uint frame;
    vec4 origin;
    mat4 rotation;
} camera;

layout(std430, set = 0, binding = 1) buffer RayBuffer {
    Ray rays[];
} raybuffer;

/*
 * Generate rays given a coordinate.
 *
 * The reason why the previously-existing ray is given is to preserve some state such as
 * its light color, amount of times it was already generated, and the subpixel quadrant
 * it previously sampled for better subpixel ray distribution.
 */
Ray generate_ray(vec2 frag_coord, Ray ray) {
    // Scale the virtual camera to make the UV plane coincide with the focus plane
    vec2 focus_plane_uv = camera.uv * (camera.focus_distance / camera.focal_len);

    // The distance between pixels in world-space
    vec2 pixel_delta = focus_plane_uv / camera.resolution;
    pixel_delta *= vec2(1, -1); // Y grows downwards in vulkan, so we have to invert it

    vec3 viewport_origin = vec3(-focus_plane_uv.x/2, focus_plane_uv.y/2, camera.focus_distance) + // Top left of focus plane
                           vec3(pixel_delta/2, 0);  // Center the pixel

    uint quadrant = ray.count % (SUBDIVISIONS_PER_AXIS * SUBDIVISIONS_PER_AXIS);
    vec3 pixel_coords = viewport_origin +
                        vec3(pixel_delta * (frag_coord + pixel_offset(seed, quadrant)), 0); // Jitter for anti-aliasing

    vec3 aperture_offset = vec3(random_disc(seed), 0) * camera.aperture_radius;

    // Vector from origin to pixel, rotated
    vec3 ray_direction = mat3(camera.rotation) * normalize(pixel_coords - aperture_offset);

    // Rotated aperture offset, shifted by camera origin
    vec3 ray_origin = (mat3(camera.rotation) * aperture_offset) + camera.origin.xyz;

    ray.origin = ray_origin;
    ray.direction = ray_direction;
    ray.out_of_bounds = false;
    ray.time = pgc_random(seed);            // random time for motion blur
    ray.color = vec3(1);                    // initialize the ray as white
    ray.bounce = 0;                         // reset the amount of bounces this ray did
    ray.count++;                            // increment the amount of rays that passed thru this pixel
    ray.light *= float(ray.count) / float(ray.count + 1);  // the light gets weighted by this amount re-generations
    return ray;
}

/* Entrypoint */
void main() {
    ivec2 coordinates = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = ivec2(camera.resolution);

    // if we fall within the viewport...
    if (coordinates.x < size.x && coordinates.y < size.y) {
        seed = uint(coordinates.x + camera.resolution.x * coordinates.y + camera.frame * camera.resolution.y * camera.resolution.x);
        uint idx = coordinates.x + coordinates.y * size.x;

        // generate the missing / out of bounds rays
        if (raybuffer.rays[idx].out_of_bounds)
            raybuffer.rays[idx] = generate_ray(coordinates, raybuffer.rays[idx]);
    }
}
