#version 460

#define SAMPLES 8
#define BOUNCES 12
#define EPSILON 0.0001
#define MAX_BVH_DEPTH 16

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_debug_printf : enable

#include "imports/ray.comp"
#include "imports/random.comp"

/* AABB node of the BVH tree */
struct BvhNode {
    uint idx;
    uint amt;

    uint left;

    vec3 min;
    vec3 max;
};

/* Material of a Mesh.
 *
 * base_color           is the base color of the mesh;
 * emission             is strenght of the emitted light by the object per channel;
 * reflectivity         describes how reflective the object is (blends between lambertian and metallic);
 * roughness            describes how rough the reflective surface is;
 * is_glass             indicates whether the material will be rendered with a glass shader;
 * ior                  is the index of refractivity of the glass material, if is_glass is true;         
 * shaded_smooth        only valid for triangle meshes, determines whether normals are interpolated;
 * is_sphere            temporary placeholder for spheres as a better indicator is figured out
 */
struct Material {
    vec4 base_color;
    vec4 emission;
    float reflectivity;
    float roughness;
    float ior;
    bool is_glass;
    bool shaded_smooth;
};

// perf: 96 bytes per triangle is pretty bad.
// Since if not shaded smooth the normals are ignored, then they can be used to 
// store 2 triangle per triangle...
// Or maybe just remove the normals altogether
struct Triangle {
    uint materialIdx;
    bool is_sphere;
    vec3[3] vertices;
    vec3[3] normals;
};

/* Record of a ray intersection.
 *
 * did_hit      indicates whether an intesection even happened;
 *              !! If no intersection happened, then the following fields are undefined !!
 * pos          is the physical location of the intersection;
 * normal       is the normal vector of the intersected surface;
 * t            is the value of the parametric variable for the ray equation;
 * material     is the material of the intersected mesh;
 */
struct HitRecord {
    bool did_hit;
    bool is_exiting;
    vec3 pos;
    vec3 normal;
    float t;
    Material material;
};

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// todo: look into inline uniform buffers for speed and small data
layout(std430, set = 0, binding = 0) uniform Camera {
    vec2 resolution; // todo: move this to (unsinged) integers
    vec2 uv;
    float focal_len;
    float focus_distance;
    float aperture_radius;
    uint frame;
    vec4 origin;
    mat4 rotation;
} camera;

layout(std430, set = 0, binding = 1) readonly buffer BvhBuffer {
    BvhNode nodes[];
} bvh;

layout(std430, set = 0, binding = 2) readonly buffer MaterialBuffer {
    Material get[]; // this makes the syntax a bit more readable: materials.get[3]
} materials;

layout(std430, set = 0, binding = 3) readonly buffer TriangleBuffer {
    Triangle get[];
} triangles;

layout(set = 0, binding = 4, rgba8) uniform image2D accumulator;
layout(set = 0, binding = 5) writeonly uniform image2D framebuffer;


Ray generate_ray(vec2 frag_coord) {
    // Scale the virtual camera to make the UV plane coincide with the focus plane
    vec2 focus_plane_uv = camera.uv * (camera.focus_distance / camera.focal_len);

    // The distance between pixels in world-space
    vec2 pixel_delta = focus_plane_uv / camera.resolution;
    pixel_delta *= vec2(1, -1); // Y grows downwards in vulkan, so we have to invert it

    vec3 viewport_origin = vec3(-focus_plane_uv.x/2, focus_plane_uv.y/2, camera.focus_distance) + // Top left of focus plane
                           vec3(pixel_delta/2, 0);  // Center the pixel

    vec3 pixel_coords = viewport_origin + 
                        vec3(pixel_delta * (frag_coord + pixel_offset(seed)), 0); // Jitter for anti-aliasing

    vec3 aperture_offset = vec3(random_disc(seed), 0) * camera.aperture_radius;

    // Vector from origin to pixel, rotated
    vec3 ray_direction = mat3(camera.rotation) * normalize(pixel_coords - aperture_offset);

    // Rotated aperture offset, shifted by camera origin 
    vec3 ray_origin = (mat3(camera.rotation) * aperture_offset) + camera.origin.xyz;

    Ray ray; 
    ray.direction = ray_direction;
    ray.origin = ray_origin;
    return ray;
}

vec3 background_color(Ray ray) {
    float blend = 0.5 * ray.direction.y + 0.5;
    //return mix(vec3(0.6, 0.8, 1.0), vec3(0.2, 0.4, 1.0), blend);
    return vec3(0);
}

// Schlick approximation of Fresnel on glass
float schlick_reflectance(float cos_angle, float ior) {
    float r0 = (1 - ior) / (1 + ior);
    r0 = r0 * r0;
    return r0 + (1 - r0) * pow((1 - cos_angle), 5);
}

// this does not handle intersecting spheres gracefully, the ratios must be pre-divided for that
void glass_shader(inout Ray ray, HitRecord hit) {
    vec3 normal = hit.normal;
    vec3 dir = ray.direction;
    
    // Check if we're entering or exiting the glass
    float ior_ratio;
    if (hit.is_exiting) {
        ior_ratio = hit.material.ior;
        normal = -normal;
    } else {
        ior_ratio = 1.0 / hit.material.ior;
    }

    float cos_angle = min(dot(-dir, normal), 1.0);
    //float sin_angle = sqrt(1 - cos_angle * cos_angle); // todo: faster sin algos? len(cross
    float sin_angle = length(cross(-dir, normal));

    bool total_reflection = ior_ratio * sin_angle > 1;
    bool schlick_reflection = pgc_random(seed) < schlick_reflectance(cos_angle, ior_ratio);

    // Check if we should reflect or refract
    vec3 out_dir;
    if (total_reflection || schlick_reflection) {
        out_dir = dir - 2 * dot(dir, normal) * normal;

    } else {
        vec3 refracted_ort = ior_ratio * (dir + cos_angle * normal);

        float ort_len = length(refracted_ort);
        vec3 refracted_par = -sqrt(1 - ort_len * ort_len) * normal;

        out_dir = refracted_ort + refracted_par;
    }

    // apply fuzziness
    out_dir = normalize(out_dir + random_unit_vector(seed) * hit.material.roughness / 2);

    ray.direction = out_dir;
    ray.origin = hit.pos;
}

// cosine-weighted lambertian lighting
void weighted_lambertian_shader(inout Ray ray, HitRecord hit) {
    ray.origin = hit.pos;

    // flip the normal if we are hitting from the "inside"
    if (hit.is_exiting)
        hit.normal *= -1;

    // reflectivity: randomly pick between reflecting and opaque based how reflective the material is
    if (pgc_random(seed) < hit.material.reflectivity) {
        ray.direction = ray.direction - 2 * dot(hit.normal, ray.direction) * hit.normal;
        ray.direction = normalize(ray.direction + random_unit_vector(seed) * hit.material.roughness); // fuzzy reflection
    } else {
        ray.direction = normalize(hit.normal + random_unit_vector(seed)); // https://www.iue.tuwien.ac.at/phd/ertl/node100.html
    }
}

// Möller-Trumbore intersection algorithm (https://www.graphics.cornell.edu/pubs/1997/MT97.pdf)
HitRecord hit_triangle(Triangle triangle, Ray ray, bool interpolate_normals) {
    /* This algorithm uses barycentric coordinates to determine whether the intersection falls within
     * the triangle.
     *
     * O = ray.origin; D = ray.dir; A, B, C = triangle points; u, v, w = barycentric coords.
     * Check where they intersect by equating the coords to the ray function:
     *      O + t*D = w*A + u*B + v*C
     *      O + t*D = (1-u-v)*A + u*B + v*C
     *      -t*D + u*(B - A) + v*(C - A) = O - A
     *
     * That is a linear equation with the following form:
     * (uppercase is vector, represent a column)
     *      |             |   | t |   |     |
     *      | D, B-A, C-A | * | u | = | O-A |
     *      |             |   | v |   |     |
     *            (M        *  tuv  =   OA)
     *
     * To solve the equation, cramer's rule is used:
     *      t = det(M with OA replacing 1st col) / det(M)
     *      u = det(M with OA replacing 2nd col) / det(M)
     *      v = det(M with OA replacing 3rd col) / det(M)
     *
     * Finally, the determinants are calculated using the scalar triple product:
     *      det(M) = (D × C-A) ⋅ B-A = dot(cross(D, C-A), B-A)
     */
    HitRecord hit;
    hit.did_hit = false;

    // Get the normal vector of the plane the triangle lays on.
    // This is done by performing a cross product between two of the sides of the triangle.
    vec3 ab = triangle.vertices[1] - triangle.vertices[0];
    vec3 ac = triangle.vertices[2] - triangle.vertices[0];
    vec3 plane_normal = normalize(cross(ab, ac));

    // Check if the ray is parallel to the plane, in which case no hit can happen
    if (abs(dot(plane_normal, ray.direction)) < EPSILON) return hit;

    vec3 o = ray.origin - triangle.vertices[0];
    vec3 p = cross(ray.direction, ac);
    vec3 q = cross(o, ab);
    float inv_det = 1 / dot(p, ab);

    // Find t using cramer's rule, and make sure the intersection happens in front
    // of the camera
    float t = dot(q, ac) * inv_det;
    if (t < EPSILON) return hit;

    // Find the barycentric coordinates
    float u = dot(p, o) * inv_det;
    float v = dot(q, ray.direction) * inv_det;
    float w = 1 - u - v;    // to avoid gaps due to precision issues

    // Check bounds of the barycentric coordinates.
    vec3 coords = vec3(u, v, w);
    if (any(lessThan(coords, vec3(0))) || any(greaterThan(coords, vec3(1)))) return hit;

    hit.did_hit = true;
    hit.t = t;
    hit.pos = ray_at(ray, t);
    hit.is_exiting = dot(plane_normal, ray.direction) > 0;

    if (interpolate_normals) {
        // interpolate across the normals using the barycentric coordinates
        hit.normal = triangle.normals[0] * w +
                     triangle.normals[1] * u +
                     triangle.normals[2] * v;
    } else {
        hit.normal = plane_normal;
    }

    return hit;
}

HitRecord hit_sphere(vec3 center, float radius, Ray ray) {
    /*  line (parametric):
            x = orig_x + dir_x * t
            y = orig_y + dir_y * t   ->   p = orig + dir * t
            z = orig_z + dir_z * t

        sphere formula:
            (x - c_x)^2 + (y - c_y)^2 + (z - c_z)^2 <= radius^2    ->    (p - center).(p - center) <= radius^2

        now we plug the line in the sphere formula and solve for t:
            (orig + dir * t - center).(orig + dir * t - center) <= r^2

            [...]

            a = dir.dir
            b = 2dir.(orig - center)
            c = (center - orig).(center - orig) - radius^2

        referring to the quadratic formula, we can tell whether the ray intersected the sphere by the discriminant:
            hit_sphere = (b^2 - 4ac >= 0)
    */
    vec3 delta = (center - ray.origin);

    // todo: apply the simpler formula for b multiples of 2
    float a = dot(ray.direction, ray.direction);
    float b = -2 * dot(ray.direction, delta);
    float c = dot(delta, delta) - radius * radius;

    float discriminant = b*b - 4*a*c;
    float t = (-b - sqrt(discriminant)) / 2*a;

    HitRecord hit;

    hit.t = t;
    hit.pos = ray_at(ray, t);
    hit.normal = normalize(hit.pos - center);

    bool did_not_hit = discriminant < 0;
    bool is_behind = t < EPSILON; // avoid floating point imprecisions

    // todo: could be solved by avoiding intersections with the same sphere and type twice in a row (eg. cannot enter sphere 2 twice in a row)
    // Done by keeping track of last enter / exit (+2 if enter, -2 if exit), and checking if it's the same.
    // Entering / exiting could be stored in the hit to avoid computing it in the glass shader (and other ones)

    hit.did_hit = !(did_not_hit || is_behind);
    hit.is_exiting = dot(hit.normal, ray.direction) > 0;

    return hit;
}

/*
 * AABB intersection code using the Slab method.
 *
 * This works by first solving the t parameter for each plane intersection, and
 * then checking if any of the intersections with the plane that should be closer
 * to the camera end up further away than the intersections of the opposite plane.
 *
 * More info at https://en.wikipedia.org/wiki/Slab_method
 */
bool hit_aabb(Ray ray, BvhNode aabb) {
    vec3 inv_dir = 1 / ray.direction;

    // Solve for the intersection points with all 6 planes:
    //  origin_x + t * direction_x = x  (for all 3 dimensions)
    vec3 t1 = (aabb.min - ray.origin) * inv_dir;
    vec3 t2 = (aabb.max - ray.origin) * inv_dir;

    // Get the closest and furthest intersections for each dimension
    vec3 d_min = min(t1, t2);
    vec3 d_max = max(t1, t2);

    float t_min = max(max(d_min.x, d_min.y), d_min.z);
    float t_max = min(min(d_max.x, d_max.y), d_max.z);

    return t_min <= t_max;
}

// todo: this is recursive, might be optimizable to a loop
HitRecord hit_meshes(Ray ray, inout uint mesh_tests) {
    HitRecord hit;
    hit.t = 1.0 / 0.0; // infinity
    hit.did_hit = false;

    // Setup stack for tree traversal
    uint stack[MAX_BVH_DEPTH + 1], stack_ptr = 1;
    stack[0] = 0;

    while (stack_ptr > 0) {
        BvhNode node = bvh.nodes[stack[--stack_ptr]];

        // If we hit the node, dig deeper, else pop the stack.
        mesh_tests++;
        if (hit_aabb(ray, node)) {

            // todo: find better way to test for leaf
            if (node.left == 0) {
                for (int tri = 0; tri < node.amt; tri++) {
                    mesh_tests++;

                    Triangle triangle = triangles.get[node.idx + tri];
                    HitRecord current_hit;

                    if (!triangle.is_sphere) {
                        current_hit = hit_triangle(triangle, ray, false);
                    } else {
                        current_hit = hit_sphere(triangle.vertices[0], triangle.vertices[1].x, ray);
                    }

                    if (current_hit.did_hit && current_hit.t < hit.t) {
                        hit = current_hit;
                        hit.material = materials.get[triangle.materialIdx];
                    }
                }

            // Else push both nodes on the stack
            } else {
                stack[stack_ptr++] = node.left + 1;
                stack[stack_ptr++] = node.left;
            }
        }
    }

    return hit;
}

vec3 ray_color(Ray ray, inout uint mesh_tests) {
    /*  The ray only gets light when it hits something emissive.
        The light that will be "received" from the emissive object
         will be tinted multiplicatively by all the surfaces the ray
         hits before reaching the camera.
        If the ray encounters multiple source of light, all of them
         will contribute to the light value of the pixel.

        The result is that we only add light to incoming_light when
         we hit an emissive, and we tint that light to the color that 
         the ray has assumed so far.
    */
    vec3 ray_color = vec3(1);
    vec3 incoming_light = vec3(0);

    for (int bounce = 0; bounce < BOUNCES + 1; bounce++) {
        HitRecord hit = hit_meshes(ray, mesh_tests);

        if (hit.did_hit) {
            Material material = hit.material;
            incoming_light += ray_color * hit.material.emission.xyz;

            if (material.is_glass) {
                glass_shader(ray, hit);
            } else {
                weighted_lambertian_shader(ray, hit);
            }

            ray_color *= material.base_color.xyz;

        } else {
            incoming_light += background_color(ray) * ray_color;
            break;
        }
    }
 
    return incoming_light;
}

vec4 gamma_correction(vec4 color) {
    return sqrt(color);
}

void main() {
    ivec2 coordinates = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);

    if (coordinates.x < size.x && coordinates.y < size.y) {
        //seed = uint(coordinates.x + camera.resolution.x * coordinates.y);
        seed = uint(coordinates.x + camera.resolution.x * coordinates.y + camera.frame * coordinates.y * coordinates.x);
        uint mesh_tests = 0;
        vec3 color = vec3(0);
        for (int i = 0; i < SAMPLES; i++) {
            Ray ray = generate_ray(coordinates.xy);

            color += ray_color(ray, mesh_tests) / float(SAMPLES);
        }

        vec4 old_pixel = imageLoad(accumulator, coordinates);
        vec4 new_pixel = (old_pixel * (camera.frame) + vec4(color, 1.0)) / (camera.frame + 1);

        imageStore(accumulator, coordinates, new_pixel);
        imageStore(framebuffer, coordinates, gamma_correction(new_pixel));

        // visualize triangle tests
        float tests = float(mesh_tests) / 10000.0f;
        imageStore(framebuffer, coordinates, gamma_correction(vec4(tests <= 1.0f ? vec3(tests) : vec3(1,0,0), 1.0)));

        //imageStore(framebuffer, coordinates, gamma_correction(vec4(color, 1.0)));
        //imageStore(framebuffer, coordinates, gamma_correction(vec4(triangle_sbo.triangles[0].first, 1.0)));
    }
}
